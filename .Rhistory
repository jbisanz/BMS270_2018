geom_jitter(height=0, width=0.2, shape=21, position=position_dodge(width=0.95)) +
#facet_wrap(~Type, ncol=1) +
theme_MicrobeR() +
theme(axis.text.x=element_text(angle=45, hjust=1), legend.position="none")
ODs %>%
gather(-Sample, key="Type", value="OD600") %>%
mutate(Type=gsub("_..+","", Type) %>% gsub("[0-9]","",.)) %>%
mutate(Type=if_else(Type=="Input","Input culture", "Cultures for experiment")) %>%
ggplot(aes(x=Sample, y=OD600, fill=Type, group=Type)) +
stat_summary(geom="bar", color="black", position=position_dodge(width=0.95)) +
geom_jitter(height=0, width=0.2, shape=21, position=position_dodge(width=0.95)) +
#facet_wrap(~Type, ncol=1) +
theme_MicrobeR() +
theme(axis.text.x=element_text(angle=45, hjust=1))
ODs %>%
gather(-Sample, key="Type", value="OD600") %>%
mutate(Type=gsub("_..+","", Type) %>% gsub("[0-9]","",.)) %>%
mutate(Type=if_else(Type=="Input","Seed culture", "Cultures for experiment")) %>%
ggplot(aes(x=Sample, y=OD600, fill=Type, group=Type)) +
stat_summary(geom="bar", color="black", position=position_dodge(width=0.95)) +
geom_jitter(height=0, width=0.2, shape=21) +
#facet_wrap(~Type, ncol=1) +
theme_MicrobeR() +
theme(axis.text.x=element_text(angle=45, hjust=1))
ODs %>%
gather(-Sample, key="Type", value="OD600") %>%
mutate(Type=gsub("_..+","", Type) %>% gsub("[0-9]","",.)) %>%
mutate(Type=if_else(Type=="Input","Seed culture", "Experimental cultures")) %>%
ggplot(aes(x=Sample, y=OD600, fill=Type, group=Type)) +
stat_summary(geom="bar", color="black", position=position_dodge(width=0.95)) +
geom_jitter(height=0, width=0.2, shape=21) +
#facet_wrap(~Type, ncol=1) +
theme_MicrobeR() +
theme(axis.text.x=element_text(angle=45, hjust=1))
setwd("~/Research/repositories/BMS270_2018/")
saveRDS(error_profile, "RDS/error_profile.RDS")
derep<-derepFastq(filt.FASTQs, verbose=FALSE) #dereplicate sequences
names(derep) <- metadata$sample_name #name the dereplicated sequences by sample of origin
saveRDS(derep, "RDS/derep.RDS")
denoised<-dada(derep, err=error_profile, multithread = TRUE) #denoise sequences, again on windows you may need to set multithread=FALSE
sv.table.nochim <- removeBimeraDenovo(sv.table, method="pooled", multithread=TRUE, verbose=TRUE) #remove chimeras, again you may need to specify multithread=FALSE on some windows systems
sv.table<-makeSequenceTable(denoised) #make your feature table
print(paste("There are", ncol(sv.table),"SVs in", nrow(sv.table), "Samples"))
saveRDS(sv.table, "RDS/sv.table.RDS")
sv.table.nochim <- removeBimeraDenovo(sv.table, method="pooled", multithread=TRUE, verbose=TRUE) #remove chimeras, again you may need to specify multithread=FALSE on some windows systems
saveRDS(sv.table.nochim, "RDS/sv.table.nochim.RDS")
print(paste("After chimera removal, there are", ncol(sv.table.nochim),"SVs in", nrow(sv.table.nochim), "Samples"))
print(paste("Chimeric sequences represented", round(100*(1-sum(sv.table.nochim)/sum(sv.table)),2), "% of sequences"))
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix")
sv.table.filtered<-Confidence.Filter(sv.table.nochim, MINSAMPS=2, MINREADS = 2)
sv.table.nochim <- removeBimeraDenovo(sv.table, method="pooled", multithread=TRUE, verbose=TRUE) #remove chimeras, again you may need to specify multithread=FALSE on some windows systems
saveRDS(sv.table.nochim, "RDS/sv.table.nochim.RDS")
print(paste("After chimera removal, there are", ncol(sv.table.nochim),"SVs in", nrow(sv.table.nochim), "Samples"))
print(paste("Chimeric sequences represented", round(100*(1-sum(sv.table.nochim)/sum(sv.table)),2), "% of sequences"))
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix")
sv.table.filtered<-Confidence.Filter(sv.table.nochim, MINSAMPS=2, MINREADS = 2)
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix")
sv.table.filtered<-Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 2)
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix") #This is the phyloseq way
sv.table.filtered<-Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 1)
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix") #This is the phyloseq way
sv.table.filtered<-Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 10)
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix") #This is the phyloseq way
sv.table.filtered<-Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 1)
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix") #This is the phyloseq way
sv.table.filtered<-Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 1, VERBOSE = F)
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix") #This is the phyloseq way
sv.table.filtered<-Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 1, VERBOSE=T)
saveRDS("RDS/sv.table.filtered.RDS")
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix") #This is the phyloseq way
sv.table.filtered<-t(Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 1, VERBOSE=T))
saveRDS(sv.table.filtered, "RDS/sv.table.filtered.RDS")
#sv.table.filtered<-as(filter_taxa(otu_table(sv.table.nochim, taxa_are_rows = FALSE), filterfun(kOverA(2,1)), prune = TRUE), "matrix") #This is the phyloseq way
sv.table.filtered<-t(Confidence.Filter(t(sv.table.nochim), MINSAMPS=2, MINREADS = 1, VERBOSE=T)) #the t() function is to transpose the table, ie rotate it 90 degrees, depending on the function, certain orientations are required
saveRDS(sv.table.filtered, "RDS/sv.table.filtered.RDS")
taxonomy <- as.data.frame(assignTaxonomy(sv.table.filtered, "rdp_train_set_14.fa.gz", multithread=TRUE, verbose=TRUE)) #assign taxonomy
taxonomy
taxonomy$Seq<-rownames(taxonomy)
taxonomy$SV_ID<-paste0("SV_", seq(from=1, to=nrow(taxonomy), by=1))
colnames(sv.table.filtered)<-taxonomy[colnames(sv.table.filtered),]$SV_ID #Our table of SVs currently has sequences for names, switch it to the unique ID you created above
rownames(taxonomy)<-taxonomy$SV_ID
saveRDS("RDS/taxonomy.RDS")
if(file.exists("RDS/tree.RDS")) {
tree<-readRDS("RDS/tree.RDS")
} else{
seqs <- taxonomy$Seq
names(seqs) <- taxonomy$SV_ID # This propagates to the tip labels of the tree
alignment <- AlignSeqs(DNAStringSet(seqs), anchor=NA, verbose = FALSE)
phang.align <- phyDat(as(alignment, "matrix"), type="DNA")
dm <- dist.ml(phang.align)
treeNJ <- NJ(dm) # Note, tip order != sequence order
fit = pml(treeNJ, data=phang.align)
fitGTR <- update(fit, k=4, inv=0.2)
fitGTR <- optim.pml(fitGTR, model="GTR",
optInv=TRUE,
optGamma=TRUE,
rearrangement = "stochastic",
control = pml.control(trace = 0))
tree<-fitGTR$tree
tree<-midpoint(tree) #midpoint root the tree
saveRDS(tree, "RDS/tree.RDS")
}
plottree <- ggtree(tree, layout = "circular", branch.length = "none")
plottree %<+% taxonomy[tree$tip.label, c("SV_ID", "Phylum", "Genus")] +
geom_tiplab2(aes(color = Phylum, label=Genus),  size = 2) +
theme(legend.position = "right") +
ggtitle("Cladogram of SV tree")
sv.table.analysis<-t(sv.table.filtered) #transpose table
phyobj<-phyloseq(otu_table(sv.table.analysis, taxa_are_rows = TRUE), tax_table(as.matrix(taxonomy)), phy_tree(tree), sample_data(metadata)) #make phyloseq object
phyobj #look at summary
taxa.summaries<-Summarize.Taxa(sv.table.analysis, taxonomy) #Summarize
Microbiome.Barplot(taxa.summaries$Genus, metadata, CATEGORY = "Timepoint") + ggtitle("Genus Abundances by Time Point")
Microbiome.Heatmap(sv.table.analysis, metadata, CATEGORY = "Timepoint", TRANSFORM="percent", NTOPFEATURES = 30)
taxonomy
print(plot_richness(phyobj, x="Timepoint", color="anonymized_name", measures=c("Observed","Shannon")) + theme_bw())
print(plot_richness(phyobj, x="Timepoint", color="anonymized_name", measures=c("Observed","Shannon"))
+ geom_line(aes(group=anonymized_name)) # add lines connected by individual
+ theme_bw() #I perfer a white rather than gray background
+ theme(legend.position="none") #we do not need the legend, but feel free to include
)
specnumber(sv.table.analysis[,metadata$sample_name], MARGIN=2)
data.frame(Sobs=vegan:specnumber(sv.table.analysis[,metadata$sample_name], MARGIN=2)) # generate the species richness using vegan
data.frame(Sobs=vegan::specnumber(sv.table.analysis[,metadata$sample_name], MARGIN=2)) # generate the species richness using vegan
metadata
data.frame(Sobs=vegan::specnumber(sv.table.analysis[,metadata$sample_name], MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name")
sv.table.subsampled<-Subsample.Table(sv.table.analysis)
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name")
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata)
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
spread(key=Timepoint, value=Sobs)
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
reshape2::dcast(anonymized_name~Timepoint) #lets make a modified version of the table where the participant is the on the rows, and the columns are the Sobs at baseline and birth
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
reshape2::dcast(anonymized_name~Timepoint, value.var="Sobs") #lets make a modified version of the table where the participant is the on the rows, and the columns are the Sobs at baseline and birth
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
reshape2::dcast(anonymized_name~Timepoint, value.var="Sobs") %>% #lets make a modified version of the table where the participant is the on the rows, and the columns are the Sobs at baseline and birth
t.test(SecondTrimester, Birth, paired=T)
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
reshape2::dcast(anonymized_name~Timepoint, value.var="Sobs") %>% #lets make a modified version of the table where the participant is the on the rows, and the columns are the Sobs at baseline and birth
t.test(.$SecondTrimester, .$Birth, paired=T)
data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
reshape2::dcast(anonymized_name~Timepoint, value.var="Sobs") #lets make a modified version of the table where the participant is the on the rows, and the columns are the Sobs at baseline and birth
Sobs<-data.frame(Sobs=vegan::specnumber(sv.table.subsampled, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
reshape2::dcast(anonymized_name~Timepoint, value.var="Sobs") #lets make a modified version of the table where the participant is the on the rows, and the columns are the Sobs at baseline and birth
Nice.Table(Sobs)
t.test(Sobs$Birth, Sobs$SecondTrimester, paired=T)
Sobs<-data.frame(Sobs=vegan::specnumber(sv.table.analysis, MARGIN=2)) %>% # generate the species richness, margin specifies that our columns are the columns of our table
rownames_to_column("sample_name") %>%
left_join(metadata) %>% #join it with the matching metadata so we know the participant and the time point
reshape2::dcast(anonymized_name~Timepoint, value.var="Sobs") #lets make a modified version of the table where the participant is the on the rows, and the columns are the Sobs at baseline and birth
Nice.Table(Sobs)
t.test(Sobs$Birth, Sobs$SecondTrimester, paired=T)
PCoA("braycurtis", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree, ADONIS = F)
PCoA("weightedunifrac", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree, ADONIS = F)
PCoA("unweightedunifrac", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree, ADONIS = F)
PCoA("jsd", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree, ADONIS = F)
PCoA("braycurtis", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree, ADONIS = F)
PCoA3D("weightedunifrac", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree) #This may not work on some windows system
print(PCoA("weightedunifrac", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree, ADONIS = F)
+ geom_line(aes(group=anonymized_name), color="grey") #Add a grey line connecting an individual's time points
+ geom_text(aes(label=anonymized_name, color=Timepoint), hjust=0, vjust=1, size=3) #add in the individual's name
+ ggtitle("Weighted UniFrac: Points joined by Participant")
)
PCoA("weightedunifrac", metadata, sv.table.analysis, COLOR="Timepoint", TREE=tree, ADONIS = F) +
geom_line(aes(group=anonymized_name), color="grey") + #Add a grey line connecting an individual's time points
geom_text(aes(label=anonymized_name, color=Timepoint), hjust=0, vjust=1, size=3) + #add in the individual's name
ggtitle("Weighted UniFrac: Points joined by Participant")
sv.subsampled<-Subsample.Table(sv.table.analysis) #normalize for sequencing depth
unweighted<-UniFrac(phyloseq(sv.subsampled, tree), weighted=F) #Generate a distance matrix, consider taking a look at this
unweighted<-UniFrac(phyloseq(sv.subsampled, tree), weighted=F) #Generate a distance matrix, consider taking a look at this
unweighted<-UniFrac(phyloseq(sv.subsampled, tree), weighted=F) #Generate a distance matrix, consider taking a look at this
sv.subsampled
tree
UniFrac
?UniFrac
unweighted<-UniFrac(phyloseq(sv.subsampled, tree), weighted=F) #Generate a distance matrix, consider taking a look at this
unweighted<-UniFrac(phyloseq(otu_table(sv.subsampled, taxa_are_rows = T), tree), weighted=F)#Generate a distance matrix, consider taking a look at this
unweighted
as.matrix(unweighted)[1:10,1:10]
Nice.Table(as.matrix(unweighted)[1:10,1:10])
Nice.Table(as.matrix(unweighted)[1:5,1:5])
adonis(unweighted ~ anonymized_name + Timepoint, data=metadata, permutations = 9999)
adonis(unweighted~Timepoint, strata=metadata$anonymized_name, data=metadata) #include strata
#You can manually feed data to DESeq2 but today we are going to use the  phyloseq_to_deseq2() function of Phyloseq to do this.
dds = phyloseq_to_deseq2(phyobj, ~ Timepoint)
dds = DESeq(dds, test="Wald", fitType="local", parallel = TRUE)
dds = phyloseq_to_deseq2(phyobj, ~ Timepoint)
gm_mean = function(x, na.rm=TRUE){exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))} #declare new function
geoMeans = apply(counts(dds), 1, gm_mean) #calculate the geometric means
dds = estimateSizeFactors(dds, geoMeans = geoMeans) #manually calculate the size factor using these new geometric means instead of the default DESeq2 approach
dds = DESeq(dds, test="Wald", fitType="local")
results.deseq<-as.data.frame(results(dds))
filt.results.deseq<-subset(results.deseq, padj<0.1 & (abs(log2FoldChange)>1)) # FDR<0.1 AND the absolute value of the fold change is >1
print(paste("There are", nrow(filt.results.deseq), "significantly different SVs"))
Nice.Table(filt.results.deseq) #display features in a table
dds = phyloseq_to_deseq2(phyobj, ~ anonymized_name + Timepoint)
geoMeans = apply(counts(dds), 1, gm_mean)
dds = estimateSizeFactors(dds, geoMeans = geoMeans)
dds = DESeq(dds, test="Wald", fitType="local", parallel = TRUE) #may need to set parallel = FALSE on some windows systems
results.deseq<-as.data.frame(results(dds))
filt.results.deseq<-subset(results.deseq, padj<0.1 & (log2FoldChange>1 | log2FoldChange<(-1)))
print(paste("There are", nrow(filt.results.deseq), "significantly different SVs"))
Nice.Table(filt.results.deseq)
#we will only assign species to the sequences in the significant results
species<-assignSpecies(taxonomy[rownames(filt.results.deseq),]$Seq, "rdp_species_assignment_14.fa.gz", allowMultiple = TRUE, verbose=TRUE)
species.results<-cbind(filt.results.deseq, species) #paste the new genus and species names onto the right of the deseq results
Nice.Table(species.results)
geom_text(data=species.results, aes(x=log2FoldChange, y=-log10(pvalue), label=Genus), color="red", hjust=1, vjust=1, alpha=0.5) #add genus names as well for the significant findings
ggplot(results.deseq, aes(x=log2FoldChange, y=-log10(pvalue)) +
ggplot(results.deseq, aes(x=log2FoldChange, y=-log10(pvalue))) +
geom_point(alpha=0.2) + #alpha is opacity, this helps see overlapping points
theme_bw() +
geom_point(data=species.results, aes(x=log2FoldChange, y=-log10(pvalue)), color="red") + #add red points for only the significant results
geom_text(data=species.results, aes(x=log2FoldChange, y=-log10(pvalue), label=Genus), color="red", hjust=1, vjust=1, alpha=0.5) #add genus names as well for the significant findings
results.deseq
results.deseq
results.deseq
species.results
results.deseq %>%
left_join(species.results)
results.deseq %>%
left_join(species.results) %>%
mutate(Significant=if_else(padj<0.1 * abs(log2FoldChange)>1, "Significant","Not Significant"))
results.deseq %>%
left_join(species.results) %>%
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant"))
results.deseq %>%
left_join(species.results) %>%
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>%
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), fill=Significant)) +
geom_point()
results.deseq %>%
left_join(species.results) %>%
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>%
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant)) +
geom_point()
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw()
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw() +
scale_color_manual(values=c("grey50","red"))
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant, label=Genus)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw() +
scale_color_manual(values=c("grey50","red")) + #manually set the colors
geom_text()
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant, label=Genus)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw() +
scale_color_manual(values=c("grey50","red")) + #manually set the colors
geom_text(hjust=1)
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant, label=Genus)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw() +
scale_color_manual(values=c("grey50","red")) + #manually set the colors
geom_text(hjust=0)
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant, label=Genus)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw() +
scale_color_manual(values=c("grey50","red")) + #manually set the colors
geom_text(hjust=0, vjust=1)
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant, label=Genus)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw() +
scale_color_manual(values=c("grey50","red")) + #manually set the colors
geom_text(hjust=0, vjust=1, alpha=0.5) #hjust and vjust change the horizontal and vertical alignment
ggtitle("Volcano plot of differential features")
results.deseq %>%
left_join(species.results) %>% #add in the names of the significant species
mutate(Significant=if_else(padj<0.1 & abs(log2FoldChange)>1, "Significant","Not Significant")) %>% #create a new category for if the result is signifcant or not
ggplot(aes(x=log2FoldChange, y=-log10(pvalue), color=Significant, label=Genus)) +
geom_point(alpha=0.5) + #alpha here is the opacity which helps visualize overlapping points
theme_bw() +
scale_color_manual(values=c("grey50","red")) + #manually set the colors
geom_text(hjust=0, vjust=1, alpha=0.5) + #hjust and vjust change the horizontal and vertical alignment +
ggtitle("Volcano plot of differential features")
normalized.table<-Make.CLR(sv.table.analysis) #normalize with CLR
normalized.table
Make.CLR(sv.table.analysis) %>% #normalize with CLR
rownames_to_column("SV")
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>%
rownames_to_column("SV")
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance")
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata)
results.deseq
filt.results.deseq
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) #only keep the significant results
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance))
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance)) +
geom_point()
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance)) +
geom_point() +
facet_wrap(~SV)
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance)) +
geom_point() +
facet_wrap(~SV, scales="free")
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance)) +
geom_point() +
theme_bw()
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance)) +
geom_point() +
theme_bw() +
facet_wrap(~SV, scales="free")
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance, group=anonymized_name)) +
geom_point() +
theme_bw() +
facet_wrap(~SV, scales="free")
Make.CLR(sv.table.analysis) %>% #normalize with CLR
as.data.frame() %>% #this is a quirk of needing a specific type of table for the functions from the tidyverse package
rownames_to_column("SV") %>%
gather(-SV, key="sample_name", value="CLRabundance") %>%
left_join(metadata) %>%
filter(SV %in% rownames(filt.results.deseq)) %>% #only keep the significant results from above
ggplot(aes(x=Timepoint, y=CLRabundance, group=anonymized_name)) +
geom_line() +
geom_point() +
theme_bw() +
facet_wrap(~SV, scales="free")
print(plot_richness(phyobj, x="nugent_class", measures = c("Shannon","Fisher"), color="Timepoint") + geom_boxplot(aes(group=nugent_class, alpha=0)) + ggtitle("Alpha diversity by Nugent Classification"))
print(Microbiome.Barplot(taxa.summaries[[6]], metadata, CATEGORY = "nugent_class") + ggtitle("Taxonomic Composition by Nugent Classification"))
Microbiome.Heatmap(sv.table.analysis, metadata, CATEGORY = "Timepoint", TRANSFORM="percent", NTOPFEATURES = 100)
Microbiome.Heatmap(sv.table.analysis, metadata, CATEGORY = "Timepoint", TRANSFORM="clr", NTOPFEATURES = 100)
Microbiome.Heatmap(sv.table.analysis, metadata, CATEGORY = "Timepoint", TRANSFORM="log10", NTOPFEATURES = 100)
Microbiome.Heatmap(sv.table.analysis, metadata, CATEGORY = "Timepoint", TRANSFORM="log10", NTOPFEATURES = 50)
cities.distance<-read.table("https://raw.githubusercontent.com/jbisanz/BMS270_2018/master/PCoA_Cities/American_Cities.txt"skip=1, row.names=1, sep='\t', header=T)
cities.distance<-read.table("https://raw.githubusercontent.com/jbisanz/BMS270_2018/master/PCoA_Cities/American_Cities.txt", skip=1, row.names=1, sep='\t', header=T)
cities
cities.distance<-read.table("https://raw.githubusercontent.com/jbisanz/BMS270_2018/master/PCoA_Cities/American_Cities.txt", skip=1, row.names=1, sep='\t', header=T)
cities.distance
kable(cities.distance)
Nice.Table(cities.distance)
ape::pcoa(dist)$vectors
ape::pcoa(dist)
cities.distance<-read.table("https://raw.githubusercontent.com/jbisanz/BMS270_2018/master/PCoA_Cities/American_Cities.txt", skip=1, row.names=1, sep='\t', header=T)
ape::pcoa(cities.distance)$vectors
ape::pcoa(cities.distance)$vectors %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point() +
geom_text(hjust=0, vjust=0)
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point() +
geom_text(hjust=0, vjust=0)
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point() +
geom_text(hjust=0, vjust=0) +
scale_x_reverse() #the direction is arbitrary, try removing this line and see what happens
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point() +
geom_text(hjust=0, vjust=0) +
scale_x_reverse() + #the direction is arbitrary, try removing this line and see what happens
theme_bw()
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point() +
geom_text(hjust=0, vjust=0) +
scale_x_reverse() + #the direction is arbitrary, try removing this line and see what happens
theme_MicrobeR()
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point() +
geom_text(hjust=0, vjust=0) +
scale_x_reverse() + #the direction is arbitrary, try removing this line and see what happens
theme_MicrobeR() +
coord_cartesian(xlim=c(-4000, 6000))
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point(color="red") +
geom_text(hjust=0, vjust=0) +
scale_x_reverse() + #the direction is arbitrary, try removing this line and see what happens
theme_MicrobeR() +
coord_cartesian(xlim=c(-4000, 6000))
wilcox.test(Sobs$Birth, Sobs$SecondTrimester, paired=T)
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.2, y=Axis.3, label=City)) +
geom_point(color="red") +
geom_text(hjust=0, vjust=0) +
scale_x_reverse() + #the direction is arbitrary, try removing this line and see what happens
theme_MicrobeR() +
coord_cartesian(xlim=c(-4000, 6000)) +
ggtitle("PCoA of distances between American Cities")
ape::pcoa(cities.distance)$vectors %>%
as.data.frame() %>%
rownames_to_column("City") %>%
ggplot(aes(x=Axis.1, y=Axis.2, label=City)) +
geom_point(color="red") +
geom_text(hjust=0, vjust=0) +
scale_x_reverse() + #the direction is arbitrary, try removing this line and see what happens
theme_MicrobeR() +
coord_cartesian(xlim=c(-4000, 6000)) +
ggtitle("PCoA of distances between American Cities")
Nice.Table(cities.distance[1:10,1:10])
taxonomy
View(taxonomy)
taxonomy[2,]
tree<-readRDS("RDS/tree.RDS")
tree
tab<-readRDS("RDS/sv.table.filtered.RDS")
tab
